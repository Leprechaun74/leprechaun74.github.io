<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title></title>

	<link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/v3.1.2/mapbox-gl.css">

	<style>
		body { margin: 0; padding: 0; }
		#map { position: absolute; top: 0; bottom: 0; width: 100%; }
	</style>
</head>
<body>

	<div id="map"></div>

	<script src="https://api.mapbox.com/mapbox-gl-js/v3.1.2/mapbox-gl.js"></script>
	<script>
		mapboxgl.accessToken = 'pk.eyJ1IjoibGVwcmVjaGF1bjc0IiwiYSI6ImNsc3Zva3pkdDFjeHUya211aGY4NHppdngifQ.ZH9I_c3Wt_ujD8d5FOQALA';
		const map = new mapboxgl.Map({
		  container: 'map',
		  // Choose from Mapbox's core styles, or make your own style with Mapbox Studio
		  style: 'mapbox://styles/leprechaun74/clsvopjri005c01po7b6hckfn',
		  center: [0, 47],
		  zoom: 4.5
		});

		map.on('load', () => {
		  // Add a new source from our GeoJSON data and
		  // set the 'cluster' option to true. GL-JS will
		  // add the point_count property to your source data.
		  /*map.addSource('Lycée', {
		      type: 'geojson',
		      // Point to GeoJSON data. This example visualizes all M1.0+ earthquakes
		      // from 12/22/15 to 1/21/16 as logged by USGS' Earthquake hazards program.
		      data: 'https://gist.githubusercontent.com/Leprechaun74/b2a60bc8a96b44308e7b36755a969ffb/raw/2b3851a05cda194f867d914e7a4f67aa03b3d268/data.geojson',
		      cluster: true,
		      clusterMaxZoom: 14, // Max zoom to cluster points on
		      clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)
		  });*/

		  map.setLayoutProperty('lycees', 'visibility', 'none');

		  map.addSource('lycees-json', {
		    type: 'geojson',
		    data: 'https://gist.githubusercontent.com/Leprechaun74/b2a60bc8a96b44308e7b36755a969ffb/raw/2b3851a05cda194f867d914e7a4f67aa03b3d268/data.geojson',
		    cluster: true,
		    clusterMaxZoom: 14,
		    clusterRadius: 50
		  });

		  map.addLayer({
		    id: 'clusters',
		    type: 'circle',
		    source: 'lycees-json',
		    filter: ['has', 'point_count'],
		    paint: {
		      // Use step expressions (https://docs.mapbox.com/style-spec/reference/expressions/#step)
		      // with three steps to implement three types of circles:
		      //   * Blue, 20px circles when point count is less than 100
		      //   * Yellow, 30px circles when point count is between 100 and 750
		      //   * Pink, 40px circles when point count is greater than or equal to 750
		      'circle-color': [
		        'step',
		        ['get', 'point_count'],
		        '#FF9F2F',
		        5,
		        '#F57C38',
		        10,
		        '#F55B38'
		      ],
		      'circle-radius': [
		        'step',
		        ['get', 'point_count'],
		        20,
		        5, // qte dans le cluster
		        30,
		        10, // qte dans le cluster
		        40
		      ]
		    }
		  });

		  map.addLayer({
		    id: 'cluster-count',
		    type: 'symbol',
		    source: 'lycees-json',
		    filter: ['has', 'point_count'],
		    layout: {
		      'text-field': ['get', 'point_count_abbreviated'],
		      'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
		      'text-size': 12
		    }
		  });

		  map.addLayer({
		    id: 'unclustered-point',
		    type: 'circle',
		    source: 'lycees-json',
		    filter: ['!', ['has', 'point_count']],
		    paint: {
		      'circle-color': '#F5CD38',
		      'circle-radius': 6,
		      'circle-stroke-width': 1,
		      'circle-stroke-color': '#fff'
		    }
		  });

		  // inspect a cluster on click
		  map.on('click', 'clusters', (e) => {
		    const features = map.queryRenderedFeatures(e.point, {
		      layers: ['clusters']
		    });
		    const clusterId = features[0].properties.cluster_id;
		    map.getSource('lycees-json').getClusterExpansionZoom(
		      clusterId,
		      (err, zoom) => {
		        if (err) return;

		        map.easeTo({
		          center: features[0].geometry.coordinates,
		          zoom: zoom
		        });
		      }
		    );
		  });

		  // When a click event occurs on a feature in
		  // the unclustered-point layer, open a popup at
		  // the location of the feature, with
		  // description HTML from its properties.
		  map.on('click', 'unclustered-point', (e) => {
		    const coordinates = e.features[0].geometry.coordinates.slice();
		    const mag = e.features[0].properties.mag;

		    new mapboxgl.Popup()
		      .setLngLat(coordinates)
		      .setHTML(
		        `Lycée partenaire de Sciences Po (CEP)`
		      )
		      .addTo(map);
		  });

		  map.on('mouseenter', 'clusters', () => {
		    map.getCanvas().style.cursor = 'pointer';
		  });
		  map.on('mouseleave', 'clusters', () => {
		    map.getCanvas().style.cursor = '';
		  });


		});
	</script>
	
</body>
</html>
